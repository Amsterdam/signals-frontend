{{#if wantActionsAndReducer}}
import injectReducerModel from 'utils/injectReducerModel';
{{/if}}
{{#if wantSaga}}
import injectSagaModel from 'utils/injectSagaModel';
{{/if}}

{{#if wantActionsAndReducer}}
import reducer from './reducer';
{{/if}}
{{#if wantSaga}}
import saga from './saga';
{{/if}}

import loadModel from './index';

{{#if wantActionsAndReducer}}
jest.mock('utils/injectReducerModel');
{{/if}}
{{#if wantSaga}}
jest.mock('utils/injectSagaModel');
{{/if}}

{{#if wantActionsAndReducer}}
jest.mock('./reducer');
{{/if}}
{{#if wantSaga}}
jest.mock('./saga');
{{/if}}

describe('loadModel', () => {
  const store = { foo: 'bar' };
  let spy;

  beforeEach(() => {
    spy = jest.fn();
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

{{#if wantActionsAndReducer}}
  it('should inject reducer', () => {
    injectReducerModel.mockImplementation(spy);
    loadModel(store);

    expect(spy).toHaveBeenCalledWith('incidentModel', reducer, store);
  });
{{/if}}

{{#if wantSaga}}
  it('should inject saga', () => {
    injectSagaModel.mockImplementation(spy);
    loadModel(store);

    expect(spy).toHaveBeenCalledWith('incidentModel', saga, store);
  });
{{/if}}
});