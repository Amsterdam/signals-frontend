// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Add /> FieldGroup rendering should render FormGroup correctly 1`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <FieldControlWrapper
      control={
        FormControl {
          "_onCollectionChange": [Function],
          "_onDisabledChange": Array [],
          "_parent": FormGroup {
            "_onDisabledChange": Array [],
            "_pendingChange": false,
            "_pendingDirty": false,
            "_pendingTouched": false,
            "asyncValidator": null,
            "controls": Object {
              "_signal": FormControl {
                "_onCollectionChange": [Function],
                "_onDisabledChange": Array [],
                "_parent": [Circular],
                "_pendingChange": true,
                "_pendingDirty": false,
                "_pendingTouched": false,
                "_pendingValue": "",
                "asyncValidator": null,
                "errors": null,
                "formState": "",
                "get": [Function],
                "getError": [Function],
                "handler": [Function],
                "hasError": [Function],
                "meta": Object {},
                "onBlur": [Function],
                "onBlurChanges": Observable {
                  "observers": Array [],
                },
                "onChange": [Function],
                "onValueChanges": Observable {
                  "observers": Array [],
                },
                "patchValue": [Function],
                "pristine": true,
                "reset": [Function],
                "setValue": [Function],
                "stateChanges": Observable {
                  "observers": Array [],
                },
                "status": "VALID",
                "statusChanges": Observable {
                  "observers": Array [],
                },
                "submitted": false,
                "touched": false,
                "validator": null,
                "validatorsOrOpts": Object {
                  "asyncValidators": null,
                  "updateOn": null,
                  "validators": null,
                },
                "value": "",
                "valueChanges": Observable {
                  "observers": Array [],
                },
              },
              "loading": FormControl {
                "_onCollectionChange": [Function],
                "_onDisabledChange": Array [],
                "_parent": [Circular],
                "_pendingChange": true,
                "_pendingDirty": false,
                "_pendingTouched": false,
                "_pendingValue": false,
                "asyncValidator": null,
                "errors": null,
                "formState": false,
                "get": [Function],
                "getError": [Function],
                "handler": [Function],
                "hasError": [Function],
                "meta": Object {},
                "onBlur": [Function],
                "onBlurChanges": Observable {
                  "observers": Array [],
                },
                "onChange": [Function],
                "onValueChanges": Observable {
                  "observers": Array [],
                },
                "patchValue": [Function],
                "pristine": true,
                "reset": [Function],
                "setValue": [Function],
                "stateChanges": Observable {
                  "observers": Array [],
                },
                "status": "VALID",
                "statusChanges": Observable {
                  "observers": Array [],
                },
                "submitted": false,
                "touched": false,
                "validator": null,
                "validatorsOrOpts": Object {
                  "asyncValidators": undefined,
                  "updateOn": undefined,
                  "validators": undefined,
                },
                "value": false,
                "valueChanges": Observable {
                  "observers": Array [],
                },
              },
              "sub_category": [Circular],
            },
            "errors": null,
            "get": [Function],
            "getError": [Function],
            "handleSubmit": [Function],
            "hasError": [Function],
            "meta": Object {},
            "patchValue": [Function],
            "pristine": true,
            "reset": [Function],
            "setValue": [Function],
            "stateChanges": Observable {
              "observers": Array [
                [Function],
              ],
            },
            "status": "INVALID",
            "statusChanges": Observable {
              "observers": Array [],
            },
            "submitted": false,
            "touched": false,
            "validator": null,
            "validatorOrOpts": Object {
              "asyncValidators": null,
              "updateOn": null,
              "validators": null,
            },
            "value": Object {
              "_signal": "",
              "loading": false,
              "sub_category": "",
            },
            "valueChanges": Observable {
              "observers": Array [],
            },
          },
          "_pendingChange": true,
          "_pendingDirty": false,
          "_pendingTouched": false,
          "_pendingValue": "",
          "asyncValidator": null,
          "errors": Object {
            "required": true,
          },
          "formState": "",
          "get": [Function],
          "getError": [Function],
          "handler": [Function],
          "hasError": [Function],
          "meta": Object {},
          "onBlur": [Function],
          "onBlurChanges": Observable {
            "observers": Array [],
          },
          "onChange": [Function],
          "onValueChanges": Observable {
            "observers": Array [],
          },
          "patchValue": [Function],
          "pristine": true,
          "reset": [Function],
          "setValue": [Function],
          "stateChanges": Observable {
            "observers": Array [],
          },
          "status": "INVALID",
          "statusChanges": Observable {
            "observers": Array [],
          },
          "submitted": false,
          "touched": false,
          "validator": [Function],
          "validatorsOrOpts": Object {
            "asyncValidators": null,
            "updateOn": null,
            "validators": [Function],
          },
          "value": "",
          "valueChanges": Observable {
            "observers": Array [],
          },
        }
      }
      display="Subcategorie"
      emptyOptionText="Selecteer..."
      multiple={false}
      name="sub_category"
      render={[Function]}
      values={
        Array [
          "test",
        ]
      }
    />
    <button
      className="action primary"
      disabled={true}
      type="submit"
    >
      <span
        className="value"
      >
        Subcategorie wijzigen
      </span>
    </button>
  </div>
</form>
`;

exports[`<Add /> FieldGroup rendering should render loading 1`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <FieldControlWrapper
      control={
        FormControl {
          "_onCollectionChange": [Function],
          "_onDisabledChange": Array [],
          "_parent": FormGroup {
            "_onDisabledChange": Array [],
            "_pendingChange": false,
            "_pendingDirty": false,
            "_pendingTouched": false,
            "asyncValidator": null,
            "controls": Object {
              "_signal": FormControl {
                "_onCollectionChange": [Function],
                "_onDisabledChange": Array [],
                "_parent": [Circular],
                "_pendingChange": true,
                "_pendingDirty": false,
                "_pendingTouched": false,
                "_pendingValue": "",
                "asyncValidator": null,
                "errors": null,
                "formState": "",
                "get": [Function],
                "getError": [Function],
                "handler": [Function],
                "hasError": [Function],
                "meta": Object {},
                "onBlur": [Function],
                "onBlurChanges": Observable {
                  "observers": Array [],
                },
                "onChange": [Function],
                "onValueChanges": Observable {
                  "observers": Array [],
                },
                "patchValue": [Function],
                "pristine": true,
                "reset": [Function],
                "setValue": [Function],
                "stateChanges": Observable {
                  "observers": Array [],
                },
                "status": "VALID",
                "statusChanges": Observable {
                  "observers": Array [],
                },
                "submitted": false,
                "touched": false,
                "validator": null,
                "validatorsOrOpts": Object {
                  "asyncValidators": null,
                  "updateOn": null,
                  "validators": null,
                },
                "value": "",
                "valueChanges": Observable {
                  "observers": Array [],
                },
              },
              "loading": FormControl {
                "_onCollectionChange": [Function],
                "_onDisabledChange": Array [],
                "_parent": [Circular],
                "_pendingChange": true,
                "_pendingDirty": false,
                "_pendingTouched": false,
                "_pendingValue": true,
                "asyncValidator": null,
                "errors": null,
                "formState": false,
                "get": [Function],
                "getError": [Function],
                "handler": [Function],
                "hasError": [Function],
                "meta": Object {},
                "onBlur": [Function],
                "onBlurChanges": Observable {
                  "observers": Array [],
                },
                "onChange": [Function],
                "onValueChanges": Observable {
                  "observers": Array [],
                },
                "patchValue": [Function],
                "pristine": true,
                "reset": [Function],
                "setValue": [Function],
                "stateChanges": Observable {
                  "observers": Array [],
                },
                "status": "VALID",
                "statusChanges": Observable {
                  "observers": Array [],
                },
                "submitted": false,
                "touched": false,
                "validator": null,
                "validatorsOrOpts": Object {
                  "asyncValidators": undefined,
                  "updateOn": undefined,
                  "validators": undefined,
                },
                "value": true,
                "valueChanges": Observable {
                  "observers": Array [],
                },
              },
              "sub_category": [Circular],
            },
            "errors": null,
            "get": [Function],
            "getError": [Function],
            "handleSubmit": [Function],
            "hasError": [Function],
            "meta": Object {},
            "patchValue": [Function],
            "pristine": true,
            "reset": [Function],
            "setValue": [Function],
            "stateChanges": Observable {
              "observers": Array [
                [Function],
              ],
            },
            "status": "INVALID",
            "statusChanges": Observable {
              "observers": Array [],
            },
            "submitted": false,
            "touched": false,
            "validator": null,
            "validatorOrOpts": Object {
              "asyncValidators": null,
              "updateOn": null,
              "validators": null,
            },
            "value": Object {
              "_signal": "",
              "loading": true,
              "sub_category": "",
            },
            "valueChanges": Observable {
              "observers": Array [],
            },
          },
          "_pendingChange": true,
          "_pendingDirty": false,
          "_pendingTouched": false,
          "_pendingValue": "",
          "asyncValidator": null,
          "errors": Object {
            "required": true,
          },
          "formState": "",
          "get": [Function],
          "getError": [Function],
          "handler": [Function],
          "hasError": [Function],
          "meta": Object {},
          "onBlur": [Function],
          "onBlurChanges": Observable {
            "observers": Array [],
          },
          "onChange": [Function],
          "onValueChanges": Observable {
            "observers": Array [],
          },
          "patchValue": [Function],
          "pristine": true,
          "reset": [Function],
          "setValue": [Function],
          "stateChanges": Observable {
            "observers": Array [],
          },
          "status": "INVALID",
          "statusChanges": Observable {
            "observers": Array [],
          },
          "submitted": false,
          "touched": false,
          "validator": [Function],
          "validatorsOrOpts": Object {
            "asyncValidators": null,
            "updateOn": null,
            "validators": [Function],
          },
          "value": "",
          "valueChanges": Observable {
            "observers": Array [],
          },
        }
      }
      display="Subcategorie"
      emptyOptionText="Selecteer..."
      multiple={false}
      name="sub_category"
      render={[Function]}
      values={
        Array [
          "test",
        ]
      }
    />
    <button
      className="action primary"
      disabled={true}
      type="submit"
    >
      <span
        className="value"
      >
        Subcategorie wijzigen
      </span>
      <span
        className="working"
      >
        <div
          className="progress-indicator progress-white"
        />
      </span>
    </button>
  </div>
</form>
`;

exports[`<Add /> should render correctly 1`] = `
<div
  className="incident-category-add"
>
  <div
    className="incident-category-add__body"
  >
    <FieldGroup
      control={
        FormGroup {
          "_onDisabledChange": Array [],
          "_pendingChange": false,
          "_pendingDirty": false,
          "_pendingTouched": false,
          "asyncValidator": null,
          "controls": Object {
            "_signal": FormControl {
              "_onCollectionChange": [Function],
              "_onDisabledChange": Array [],
              "_parent": [Circular],
              "_pendingChange": true,
              "_pendingDirty": false,
              "_pendingTouched": false,
              "_pendingValue": "",
              "asyncValidator": null,
              "errors": null,
              "formState": "",
              "get": [Function],
              "getError": [Function],
              "handler": [Function],
              "hasError": [Function],
              "meta": Object {},
              "onBlur": [Function],
              "onBlurChanges": Observable {
                "observers": Array [],
              },
              "onChange": [Function],
              "onValueChanges": Observable {
                "observers": Array [],
              },
              "patchValue": [Function],
              "pristine": true,
              "reset": [Function],
              "setValue": [Function],
              "stateChanges": Observable {
                "observers": Array [],
              },
              "status": "VALID",
              "statusChanges": Observable {
                "observers": Array [],
              },
              "submitted": false,
              "touched": false,
              "validator": null,
              "validatorsOrOpts": Object {
                "asyncValidators": null,
                "updateOn": null,
                "validators": null,
              },
              "value": "",
              "valueChanges": Observable {
                "observers": Array [],
              },
            },
            "loading": FormControl {
              "_onCollectionChange": [Function],
              "_onDisabledChange": Array [],
              "_parent": [Circular],
              "_pendingChange": true,
              "_pendingDirty": false,
              "_pendingTouched": false,
              "_pendingValue": false,
              "asyncValidator": null,
              "errors": null,
              "formState": false,
              "get": [Function],
              "getError": [Function],
              "handler": [Function],
              "hasError": [Function],
              "meta": Object {},
              "onBlur": [Function],
              "onBlurChanges": Observable {
                "observers": Array [],
              },
              "onChange": [Function],
              "onValueChanges": Observable {
                "observers": Array [],
              },
              "patchValue": [Function],
              "pristine": true,
              "reset": [Function],
              "setValue": [Function],
              "stateChanges": Observable {
                "observers": Array [],
              },
              "status": "VALID",
              "statusChanges": Observable {
                "observers": Array [],
              },
              "submitted": false,
              "touched": false,
              "validator": null,
              "validatorsOrOpts": Object {
                "asyncValidators": undefined,
                "updateOn": undefined,
                "validators": undefined,
              },
              "value": false,
              "valueChanges": Observable {
                "observers": Array [],
              },
            },
            "sub_category": FormControl {
              "_onCollectionChange": [Function],
              "_onDisabledChange": Array [],
              "_parent": [Circular],
              "_pendingChange": true,
              "_pendingDirty": false,
              "_pendingTouched": false,
              "_pendingValue": "",
              "asyncValidator": null,
              "errors": Object {
                "required": true,
              },
              "formState": "",
              "get": [Function],
              "getError": [Function],
              "handler": [Function],
              "hasError": [Function],
              "meta": Object {},
              "onBlur": [Function],
              "onBlurChanges": Observable {
                "observers": Array [],
              },
              "onChange": [Function],
              "onValueChanges": Observable {
                "observers": Array [],
              },
              "patchValue": [Function],
              "pristine": true,
              "reset": [Function],
              "setValue": [Function],
              "stateChanges": Observable {
                "observers": Array [],
              },
              "status": "INVALID",
              "statusChanges": Observable {
                "observers": Array [],
              },
              "submitted": false,
              "touched": false,
              "validator": [Function],
              "validatorsOrOpts": Object {
                "asyncValidators": null,
                "updateOn": null,
                "validators": [Function],
              },
              "value": "",
              "valueChanges": Observable {
                "observers": Array [],
              },
            },
          },
          "errors": null,
          "get": [Function],
          "getError": [Function],
          "handleSubmit": [Function],
          "hasError": [Function],
          "meta": Object {},
          "patchValue": [Function],
          "pristine": true,
          "reset": [Function],
          "setValue": [Function],
          "stateChanges": Observable {
            "observers": Array [],
          },
          "status": "INVALID",
          "statusChanges": Observable {
            "observers": Array [],
          },
          "submitted": false,
          "touched": false,
          "validator": null,
          "validatorOrOpts": Object {
            "asyncValidators": null,
            "updateOn": null,
            "validators": null,
          },
          "value": Object {
            "_signal": "",
            "loading": false,
            "sub_category": "",
          },
          "valueChanges": Observable {
            "observers": Array [],
          },
        }
      }
      render={[Function]}
      strict={true}
    />
  </div>
</div>
`;
