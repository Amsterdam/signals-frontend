// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Form /> FieldGroup rendering should render FormGroup correctly 1`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <FieldControlWrapper
      control={
        FormControl {
          "_onCollectionChange": [Function],
          "_onDisabledChange": Array [],
          "_parent": FormGroup {
            "_onDisabledChange": Array [],
            "_pendingChange": false,
            "_pendingDirty": false,
            "_pendingTouched": false,
            "asyncValidator": null,
            "controls": Object {
              "coordinates": [Circular],
              "location": FormControl {
                "_onCollectionChange": [Function],
                "_onDisabledChange": Array [],
                "_parent": [Circular],
                "_pendingChange": true,
                "_pendingDirty": false,
                "_pendingTouched": false,
                "_pendingValue": Object {
                  "foo": "bar",
                },
                "asyncValidator": null,
                "errors": null,
                "formState": Object {
                  "foo": "bar",
                },
                "get": [Function],
                "getError": [Function],
                "handler": [Function],
                "hasError": [Function],
                "meta": Object {},
                "onBlur": [Function],
                "onBlurChanges": Observable {
                  "observers": Array [],
                },
                "onChange": [Function],
                "onValueChanges": Observable {
                  "observers": Array [],
                },
                "patchValue": [Function],
                "pristine": true,
                "reset": [Function],
                "setValue": [Function],
                "stateChanges": Observable {
                  "observers": Array [],
                },
                "status": "VALID",
                "statusChanges": Observable {
                  "observers": Array [],
                },
                "submitted": false,
                "touched": false,
                "validator": null,
                "validatorsOrOpts": Object {
                  "asyncValidators": undefined,
                  "updateOn": undefined,
                  "validators": undefined,
                },
                "value": Object {
                  "foo": "bar",
                },
                "valueChanges": Observable {
                  "observers": Array [],
                },
              },
            },
            "errors": null,
            "get": [Function],
            "getError": [Function],
            "handleSubmit": [Function],
            "hasError": [Function],
            "meta": Object {},
            "patchValue": [Function],
            "pristine": true,
            "reset": [Function],
            "setValue": [Function],
            "stateChanges": Observable {
              "observers": Array [
                [Function],
              ],
            },
            "status": "INVALID",
            "statusChanges": Observable {
              "observers": Array [],
            },
            "submitted": false,
            "touched": false,
            "validator": null,
            "validatorOrOpts": Object {
              "asyncValidators": null,
              "updateOn": null,
              "validators": null,
            },
            "value": Object {
              "coordinates": "",
              "location": Object {
                "foo": "bar",
              },
            },
            "valueChanges": Observable {
              "observers": Array [],
            },
          },
          "_pendingChange": true,
          "_pendingDirty": false,
          "_pendingTouched": false,
          "_pendingValue": "",
          "asyncValidator": null,
          "errors": Object {
            "required": true,
          },
          "formState": "",
          "get": [Function],
          "getError": [Function],
          "handler": [Function],
          "hasError": [Function],
          "meta": Object {},
          "onBlur": [Function],
          "onBlurChanges": Observable {
            "observers": Array [],
          },
          "onChange": [Function],
          "onValueChanges": Observable {
            "observers": Array [],
          },
          "patchValue": [Function],
          "pristine": true,
          "reset": [Function],
          "setValue": [Function],
          "stateChanges": Observable {
            "observers": Array [],
          },
          "status": "INVALID",
          "statusChanges": Observable {
            "observers": Array [],
          },
          "submitted": false,
          "touched": false,
          "validator": [Function],
          "validatorsOrOpts": Object {
            "asyncValidators": null,
            "updateOn": null,
            "validators": [Function],
          },
          "value": "",
          "valueChanges": Observable {
            "observers": Array [],
          },
        }
      }
      display="Coordinates"
      emptyOptionText=""
      name="coordinates"
      render={[Function]}
      values={Array []}
    />
    <FieldControlWrapper
      control={
        FormControl {
          "_onCollectionChange": [Function],
          "_onDisabledChange": Array [],
          "_parent": FormGroup {
            "_onDisabledChange": Array [],
            "_pendingChange": false,
            "_pendingDirty": false,
            "_pendingTouched": false,
            "asyncValidator": null,
            "controls": Object {
              "coordinates": FormControl {
                "_onCollectionChange": [Function],
                "_onDisabledChange": Array [],
                "_parent": [Circular],
                "_pendingChange": true,
                "_pendingDirty": false,
                "_pendingTouched": false,
                "_pendingValue": "",
                "asyncValidator": null,
                "errors": Object {
                  "required": true,
                },
                "formState": "",
                "get": [Function],
                "getError": [Function],
                "handler": [Function],
                "hasError": [Function],
                "meta": Object {},
                "onBlur": [Function],
                "onBlurChanges": Observable {
                  "observers": Array [],
                },
                "onChange": [Function],
                "onValueChanges": Observable {
                  "observers": Array [],
                },
                "patchValue": [Function],
                "pristine": true,
                "reset": [Function],
                "setValue": [Function],
                "stateChanges": Observable {
                  "observers": Array [],
                },
                "status": "INVALID",
                "statusChanges": Observable {
                  "observers": Array [],
                },
                "submitted": false,
                "touched": false,
                "validator": [Function],
                "validatorsOrOpts": Object {
                  "asyncValidators": null,
                  "updateOn": null,
                  "validators": [Function],
                },
                "value": "",
                "valueChanges": Observable {
                  "observers": Array [],
                },
              },
              "location": [Circular],
            },
            "errors": null,
            "get": [Function],
            "getError": [Function],
            "handleSubmit": [Function],
            "hasError": [Function],
            "meta": Object {},
            "patchValue": [Function],
            "pristine": true,
            "reset": [Function],
            "setValue": [Function],
            "stateChanges": Observable {
              "observers": Array [
                [Function],
              ],
            },
            "status": "INVALID",
            "statusChanges": Observable {
              "observers": Array [],
            },
            "submitted": false,
            "touched": false,
            "validator": null,
            "validatorOrOpts": Object {
              "asyncValidators": null,
              "updateOn": null,
              "validators": null,
            },
            "value": Object {
              "coordinates": "",
              "location": Object {
                "foo": "bar",
              },
            },
            "valueChanges": Observable {
              "observers": Array [],
            },
          },
          "_pendingChange": true,
          "_pendingDirty": false,
          "_pendingTouched": false,
          "_pendingValue": Object {
            "foo": "bar",
          },
          "asyncValidator": null,
          "errors": null,
          "formState": Object {
            "foo": "bar",
          },
          "get": [Function],
          "getError": [Function],
          "handler": [Function],
          "hasError": [Function],
          "meta": Object {},
          "onBlur": [Function],
          "onBlurChanges": Observable {
            "observers": Array [],
          },
          "onChange": [Function],
          "onValueChanges": Observable {
            "observers": Array [],
          },
          "patchValue": [Function],
          "pristine": true,
          "reset": [Function],
          "setValue": [Function],
          "stateChanges": Observable {
            "observers": Array [],
          },
          "status": "VALID",
          "statusChanges": Observable {
            "observers": Array [],
          },
          "submitted": false,
          "touched": false,
          "validator": null,
          "validatorsOrOpts": Object {
            "asyncValidators": undefined,
            "updateOn": undefined,
            "validators": undefined,
          },
          "value": Object {
            "foo": "bar",
          },
          "valueChanges": Observable {
            "observers": Array [],
          },
        }
      }
      emptyOptionText=""
      name="location"
      onQueryResult={[Function]}
      render={[Function]}
      values={Array []}
    />
    <button
      className="location-form__submit action primary"
      disabled={true}
      type="submit"
    >
      Locatie opslaan
    </button>
    <button
      className="location-form__cancel action secundary-grey"
    >
      Annuleren
    </button>
  </div>
</form>
`;

exports[`<Form /> FieldGroup rendering should render FormGroup unauthorized error correctly 1`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <FieldControlWrapper
      control={
        FormControl {
          "_onCollectionChange": [Function],
          "_onDisabledChange": Array [],
          "_parent": FormGroup {
            "_onDisabledChange": Array [],
            "_pendingChange": false,
            "_pendingDirty": false,
            "_pendingTouched": false,
            "asyncValidator": null,
            "controls": Object {
              "coordinates": [Circular],
              "location": FormControl {
                "_onCollectionChange": [Function],
                "_onDisabledChange": Array [],
                "_parent": [Circular],
                "_pendingChange": true,
                "_pendingDirty": false,
                "_pendingTouched": false,
                "_pendingValue": Object {
                  "foo": "bar",
                },
                "asyncValidator": null,
                "errors": null,
                "formState": Object {
                  "foo": "bar",
                },
                "get": [Function],
                "getError": [Function],
                "handler": [Function],
                "hasError": [Function],
                "meta": Object {},
                "onBlur": [Function],
                "onBlurChanges": Observable {
                  "observers": Array [],
                },
                "onChange": [Function],
                "onValueChanges": Observable {
                  "observers": Array [],
                },
                "patchValue": [Function],
                "pristine": true,
                "reset": [Function],
                "setValue": [Function],
                "stateChanges": Observable {
                  "observers": Array [],
                },
                "status": "VALID",
                "statusChanges": Observable {
                  "observers": Array [],
                },
                "submitted": false,
                "touched": false,
                "validator": null,
                "validatorsOrOpts": Object {
                  "asyncValidators": undefined,
                  "updateOn": undefined,
                  "validators": undefined,
                },
                "value": Object {
                  "foo": "bar",
                },
                "valueChanges": Observable {
                  "observers": Array [],
                },
              },
            },
            "errors": null,
            "get": [Function],
            "getError": [Function],
            "handleSubmit": [Function],
            "hasError": [Function],
            "meta": Object {},
            "patchValue": [Function],
            "pristine": true,
            "reset": [Function],
            "setValue": [Function],
            "stateChanges": Observable {
              "observers": Array [
                [Function],
              ],
            },
            "status": "INVALID",
            "statusChanges": Observable {
              "observers": Array [],
            },
            "submitted": false,
            "touched": false,
            "validator": null,
            "validatorOrOpts": Object {
              "asyncValidators": null,
              "updateOn": null,
              "validators": null,
            },
            "value": Object {
              "coordinates": "",
              "location": Object {
                "foo": "bar",
              },
            },
            "valueChanges": Observable {
              "observers": Array [],
            },
          },
          "_pendingChange": true,
          "_pendingDirty": false,
          "_pendingTouched": false,
          "_pendingValue": "",
          "asyncValidator": null,
          "errors": Object {
            "required": true,
          },
          "formState": "",
          "get": [Function],
          "getError": [Function],
          "handler": [Function],
          "hasError": [Function],
          "meta": Object {},
          "onBlur": [Function],
          "onBlurChanges": Observable {
            "observers": Array [],
          },
          "onChange": [Function],
          "onValueChanges": Observable {
            "observers": Array [],
          },
          "patchValue": [Function],
          "pristine": true,
          "reset": [Function],
          "setValue": [Function],
          "stateChanges": Observable {
            "observers": Array [],
          },
          "status": "INVALID",
          "statusChanges": Observable {
            "observers": Array [],
          },
          "submitted": false,
          "touched": false,
          "validator": [Function],
          "validatorsOrOpts": Object {
            "asyncValidators": null,
            "updateOn": null,
            "validators": [Function],
          },
          "value": "",
          "valueChanges": Observable {
            "observers": Array [],
          },
        }
      }
      display="Coordinates"
      emptyOptionText=""
      name="coordinates"
      render={[Function]}
      values={Array []}
    />
    <FieldControlWrapper
      control={
        FormControl {
          "_onCollectionChange": [Function],
          "_onDisabledChange": Array [],
          "_parent": FormGroup {
            "_onDisabledChange": Array [],
            "_pendingChange": false,
            "_pendingDirty": false,
            "_pendingTouched": false,
            "asyncValidator": null,
            "controls": Object {
              "coordinates": FormControl {
                "_onCollectionChange": [Function],
                "_onDisabledChange": Array [],
                "_parent": [Circular],
                "_pendingChange": true,
                "_pendingDirty": false,
                "_pendingTouched": false,
                "_pendingValue": "",
                "asyncValidator": null,
                "errors": Object {
                  "required": true,
                },
                "formState": "",
                "get": [Function],
                "getError": [Function],
                "handler": [Function],
                "hasError": [Function],
                "meta": Object {},
                "onBlur": [Function],
                "onBlurChanges": Observable {
                  "observers": Array [],
                },
                "onChange": [Function],
                "onValueChanges": Observable {
                  "observers": Array [],
                },
                "patchValue": [Function],
                "pristine": true,
                "reset": [Function],
                "setValue": [Function],
                "stateChanges": Observable {
                  "observers": Array [],
                },
                "status": "INVALID",
                "statusChanges": Observable {
                  "observers": Array [],
                },
                "submitted": false,
                "touched": false,
                "validator": [Function],
                "validatorsOrOpts": Object {
                  "asyncValidators": null,
                  "updateOn": null,
                  "validators": [Function],
                },
                "value": "",
                "valueChanges": Observable {
                  "observers": Array [],
                },
              },
              "location": [Circular],
            },
            "errors": null,
            "get": [Function],
            "getError": [Function],
            "handleSubmit": [Function],
            "hasError": [Function],
            "meta": Object {},
            "patchValue": [Function],
            "pristine": true,
            "reset": [Function],
            "setValue": [Function],
            "stateChanges": Observable {
              "observers": Array [
                [Function],
              ],
            },
            "status": "INVALID",
            "statusChanges": Observable {
              "observers": Array [],
            },
            "submitted": false,
            "touched": false,
            "validator": null,
            "validatorOrOpts": Object {
              "asyncValidators": null,
              "updateOn": null,
              "validators": null,
            },
            "value": Object {
              "coordinates": "",
              "location": Object {
                "foo": "bar",
              },
            },
            "valueChanges": Observable {
              "observers": Array [],
            },
          },
          "_pendingChange": true,
          "_pendingDirty": false,
          "_pendingTouched": false,
          "_pendingValue": Object {
            "foo": "bar",
          },
          "asyncValidator": null,
          "errors": null,
          "formState": Object {
            "foo": "bar",
          },
          "get": [Function],
          "getError": [Function],
          "handler": [Function],
          "hasError": [Function],
          "meta": Object {},
          "onBlur": [Function],
          "onBlurChanges": Observable {
            "observers": Array [],
          },
          "onChange": [Function],
          "onValueChanges": Observable {
            "observers": Array [],
          },
          "patchValue": [Function],
          "pristine": true,
          "reset": [Function],
          "setValue": [Function],
          "stateChanges": Observable {
            "observers": Array [],
          },
          "status": "VALID",
          "statusChanges": Observable {
            "observers": Array [],
          },
          "submitted": false,
          "touched": false,
          "validator": null,
          "validatorsOrOpts": Object {
            "asyncValidators": undefined,
            "updateOn": undefined,
            "validators": undefined,
          },
          "value": Object {
            "foo": "bar",
          },
          "valueChanges": Observable {
            "observers": Array [],
          },
        }
      }
      emptyOptionText=""
      name="location"
      onQueryResult={[Function]}
      render={[Function]}
      values={Array []}
    />
    <div
      className="notification notification-red"
    >
      U bent niet geautoriseerd om dit te doen.
    </div>
    <button
      className="location-form__submit action primary"
      disabled={true}
      type="submit"
    >
      Locatie opslaan
    </button>
    <button
      className="location-form__cancel action secundary-grey"
    >
      Annuleren
    </button>
  </div>
</form>
`;

exports[`<Form /> FieldGroup rendering should render FormGroup unspecified error correctly 1`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <FieldControlWrapper
      control={
        FormControl {
          "_onCollectionChange": [Function],
          "_onDisabledChange": Array [],
          "_parent": FormGroup {
            "_onDisabledChange": Array [],
            "_pendingChange": false,
            "_pendingDirty": false,
            "_pendingTouched": false,
            "asyncValidator": null,
            "controls": Object {
              "coordinates": [Circular],
              "location": FormControl {
                "_onCollectionChange": [Function],
                "_onDisabledChange": Array [],
                "_parent": [Circular],
                "_pendingChange": true,
                "_pendingDirty": false,
                "_pendingTouched": false,
                "_pendingValue": Object {
                  "foo": "bar",
                },
                "asyncValidator": null,
                "errors": null,
                "formState": Object {
                  "foo": "bar",
                },
                "get": [Function],
                "getError": [Function],
                "handler": [Function],
                "hasError": [Function],
                "meta": Object {},
                "onBlur": [Function],
                "onBlurChanges": Observable {
                  "observers": Array [],
                },
                "onChange": [Function],
                "onValueChanges": Observable {
                  "observers": Array [],
                },
                "patchValue": [Function],
                "pristine": true,
                "reset": [Function],
                "setValue": [Function],
                "stateChanges": Observable {
                  "observers": Array [],
                },
                "status": "VALID",
                "statusChanges": Observable {
                  "observers": Array [],
                },
                "submitted": false,
                "touched": false,
                "validator": null,
                "validatorsOrOpts": Object {
                  "asyncValidators": undefined,
                  "updateOn": undefined,
                  "validators": undefined,
                },
                "value": Object {
                  "foo": "bar",
                },
                "valueChanges": Observable {
                  "observers": Array [],
                },
              },
            },
            "errors": null,
            "get": [Function],
            "getError": [Function],
            "handleSubmit": [Function],
            "hasError": [Function],
            "meta": Object {},
            "patchValue": [Function],
            "pristine": true,
            "reset": [Function],
            "setValue": [Function],
            "stateChanges": Observable {
              "observers": Array [
                [Function],
              ],
            },
            "status": "INVALID",
            "statusChanges": Observable {
              "observers": Array [],
            },
            "submitted": false,
            "touched": false,
            "validator": null,
            "validatorOrOpts": Object {
              "asyncValidators": null,
              "updateOn": null,
              "validators": null,
            },
            "value": Object {
              "coordinates": "",
              "location": Object {
                "foo": "bar",
              },
            },
            "valueChanges": Observable {
              "observers": Array [],
            },
          },
          "_pendingChange": true,
          "_pendingDirty": false,
          "_pendingTouched": false,
          "_pendingValue": "",
          "asyncValidator": null,
          "errors": Object {
            "required": true,
          },
          "formState": "",
          "get": [Function],
          "getError": [Function],
          "handler": [Function],
          "hasError": [Function],
          "meta": Object {},
          "onBlur": [Function],
          "onBlurChanges": Observable {
            "observers": Array [],
          },
          "onChange": [Function],
          "onValueChanges": Observable {
            "observers": Array [],
          },
          "patchValue": [Function],
          "pristine": true,
          "reset": [Function],
          "setValue": [Function],
          "stateChanges": Observable {
            "observers": Array [],
          },
          "status": "INVALID",
          "statusChanges": Observable {
            "observers": Array [],
          },
          "submitted": false,
          "touched": false,
          "validator": [Function],
          "validatorsOrOpts": Object {
            "asyncValidators": null,
            "updateOn": null,
            "validators": [Function],
          },
          "value": "",
          "valueChanges": Observable {
            "observers": Array [],
          },
        }
      }
      display="Coordinates"
      emptyOptionText=""
      name="coordinates"
      render={[Function]}
      values={Array []}
    />
    <FieldControlWrapper
      control={
        FormControl {
          "_onCollectionChange": [Function],
          "_onDisabledChange": Array [],
          "_parent": FormGroup {
            "_onDisabledChange": Array [],
            "_pendingChange": false,
            "_pendingDirty": false,
            "_pendingTouched": false,
            "asyncValidator": null,
            "controls": Object {
              "coordinates": FormControl {
                "_onCollectionChange": [Function],
                "_onDisabledChange": Array [],
                "_parent": [Circular],
                "_pendingChange": true,
                "_pendingDirty": false,
                "_pendingTouched": false,
                "_pendingValue": "",
                "asyncValidator": null,
                "errors": Object {
                  "required": true,
                },
                "formState": "",
                "get": [Function],
                "getError": [Function],
                "handler": [Function],
                "hasError": [Function],
                "meta": Object {},
                "onBlur": [Function],
                "onBlurChanges": Observable {
                  "observers": Array [],
                },
                "onChange": [Function],
                "onValueChanges": Observable {
                  "observers": Array [],
                },
                "patchValue": [Function],
                "pristine": true,
                "reset": [Function],
                "setValue": [Function],
                "stateChanges": Observable {
                  "observers": Array [],
                },
                "status": "INVALID",
                "statusChanges": Observable {
                  "observers": Array [],
                },
                "submitted": false,
                "touched": false,
                "validator": [Function],
                "validatorsOrOpts": Object {
                  "asyncValidators": null,
                  "updateOn": null,
                  "validators": [Function],
                },
                "value": "",
                "valueChanges": Observable {
                  "observers": Array [],
                },
              },
              "location": [Circular],
            },
            "errors": null,
            "get": [Function],
            "getError": [Function],
            "handleSubmit": [Function],
            "hasError": [Function],
            "meta": Object {},
            "patchValue": [Function],
            "pristine": true,
            "reset": [Function],
            "setValue": [Function],
            "stateChanges": Observable {
              "observers": Array [
                [Function],
              ],
            },
            "status": "INVALID",
            "statusChanges": Observable {
              "observers": Array [],
            },
            "submitted": false,
            "touched": false,
            "validator": null,
            "validatorOrOpts": Object {
              "asyncValidators": null,
              "updateOn": null,
              "validators": null,
            },
            "value": Object {
              "coordinates": "",
              "location": Object {
                "foo": "bar",
              },
            },
            "valueChanges": Observable {
              "observers": Array [],
            },
          },
          "_pendingChange": true,
          "_pendingDirty": false,
          "_pendingTouched": false,
          "_pendingValue": Object {
            "foo": "bar",
          },
          "asyncValidator": null,
          "errors": null,
          "formState": Object {
            "foo": "bar",
          },
          "get": [Function],
          "getError": [Function],
          "handler": [Function],
          "hasError": [Function],
          "meta": Object {},
          "onBlur": [Function],
          "onBlurChanges": Observable {
            "observers": Array [],
          },
          "onChange": [Function],
          "onValueChanges": Observable {
            "observers": Array [],
          },
          "patchValue": [Function],
          "pristine": true,
          "reset": [Function],
          "setValue": [Function],
          "stateChanges": Observable {
            "observers": Array [],
          },
          "status": "VALID",
          "statusChanges": Observable {
            "observers": Array [],
          },
          "submitted": false,
          "touched": false,
          "validator": null,
          "validatorsOrOpts": Object {
            "asyncValidators": undefined,
            "updateOn": undefined,
            "validators": undefined,
          },
          "value": Object {
            "foo": "bar",
          },
          "valueChanges": Observable {
            "observers": Array [],
          },
        }
      }
      emptyOptionText=""
      name="location"
      onQueryResult={[Function]}
      render={[Function]}
      values={Array []}
    />
    <div
      className="notification notification-red"
    >
      De nieuwe locatie kon niet worden gewijzigd.
    </div>
    <button
      className="location-form__submit action primary"
      disabled={true}
      type="submit"
    >
      Locatie opslaan
    </button>
    <button
      className="location-form__cancel action secundary-grey"
    >
      Annuleren
    </button>
  </div>
</form>
`;

exports[`<Form /> FieldGroup rendering should render patching 1`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <FieldControlWrapper
      control={
        FormControl {
          "_onCollectionChange": [Function],
          "_onDisabledChange": Array [],
          "_parent": FormGroup {
            "_onDisabledChange": Array [],
            "_pendingChange": false,
            "_pendingDirty": false,
            "_pendingTouched": false,
            "asyncValidator": null,
            "controls": Object {
              "coordinates": [Circular],
              "location": FormControl {
                "_onCollectionChange": [Function],
                "_onDisabledChange": Array [],
                "_parent": [Circular],
                "_pendingChange": true,
                "_pendingDirty": false,
                "_pendingTouched": false,
                "_pendingValue": Object {
                  "foo": "bar",
                },
                "asyncValidator": null,
                "errors": null,
                "formState": Object {
                  "foo": "bar",
                },
                "get": [Function],
                "getError": [Function],
                "handler": [Function],
                "hasError": [Function],
                "meta": Object {},
                "onBlur": [Function],
                "onBlurChanges": Observable {
                  "observers": Array [],
                },
                "onChange": [Function],
                "onValueChanges": Observable {
                  "observers": Array [],
                },
                "patchValue": [Function],
                "pristine": true,
                "reset": [Function],
                "setValue": [Function],
                "stateChanges": Observable {
                  "observers": Array [],
                },
                "status": "VALID",
                "statusChanges": Observable {
                  "observers": Array [],
                },
                "submitted": false,
                "touched": false,
                "validator": null,
                "validatorsOrOpts": Object {
                  "asyncValidators": undefined,
                  "updateOn": undefined,
                  "validators": undefined,
                },
                "value": Object {
                  "foo": "bar",
                },
                "valueChanges": Observable {
                  "observers": Array [],
                },
              },
            },
            "errors": null,
            "get": [Function],
            "getError": [Function],
            "handleSubmit": [Function],
            "hasError": [Function],
            "meta": Object {},
            "patchValue": [Function],
            "pristine": true,
            "reset": [Function],
            "setValue": [Function],
            "stateChanges": Observable {
              "observers": Array [
                [Function],
              ],
            },
            "status": "INVALID",
            "statusChanges": Observable {
              "observers": Array [],
            },
            "submitted": false,
            "touched": false,
            "validator": null,
            "validatorOrOpts": Object {
              "asyncValidators": null,
              "updateOn": null,
              "validators": null,
            },
            "value": Object {
              "coordinates": "",
              "location": Object {
                "foo": "bar",
              },
            },
            "valueChanges": Observable {
              "observers": Array [],
            },
          },
          "_pendingChange": true,
          "_pendingDirty": false,
          "_pendingTouched": false,
          "_pendingValue": "",
          "asyncValidator": null,
          "errors": Object {
            "required": true,
          },
          "formState": "",
          "get": [Function],
          "getError": [Function],
          "handler": [Function],
          "hasError": [Function],
          "meta": Object {},
          "onBlur": [Function],
          "onBlurChanges": Observable {
            "observers": Array [],
          },
          "onChange": [Function],
          "onValueChanges": Observable {
            "observers": Array [],
          },
          "patchValue": [Function],
          "pristine": true,
          "reset": [Function],
          "setValue": [Function],
          "stateChanges": Observable {
            "observers": Array [],
          },
          "status": "INVALID",
          "statusChanges": Observable {
            "observers": Array [],
          },
          "submitted": false,
          "touched": false,
          "validator": [Function],
          "validatorsOrOpts": Object {
            "asyncValidators": null,
            "updateOn": null,
            "validators": [Function],
          },
          "value": "",
          "valueChanges": Observable {
            "observers": Array [],
          },
        }
      }
      display="Coordinates"
      emptyOptionText=""
      name="coordinates"
      render={[Function]}
      values={Array []}
    />
    <FieldControlWrapper
      control={
        FormControl {
          "_onCollectionChange": [Function],
          "_onDisabledChange": Array [],
          "_parent": FormGroup {
            "_onDisabledChange": Array [],
            "_pendingChange": false,
            "_pendingDirty": false,
            "_pendingTouched": false,
            "asyncValidator": null,
            "controls": Object {
              "coordinates": FormControl {
                "_onCollectionChange": [Function],
                "_onDisabledChange": Array [],
                "_parent": [Circular],
                "_pendingChange": true,
                "_pendingDirty": false,
                "_pendingTouched": false,
                "_pendingValue": "",
                "asyncValidator": null,
                "errors": Object {
                  "required": true,
                },
                "formState": "",
                "get": [Function],
                "getError": [Function],
                "handler": [Function],
                "hasError": [Function],
                "meta": Object {},
                "onBlur": [Function],
                "onBlurChanges": Observable {
                  "observers": Array [],
                },
                "onChange": [Function],
                "onValueChanges": Observable {
                  "observers": Array [],
                },
                "patchValue": [Function],
                "pristine": true,
                "reset": [Function],
                "setValue": [Function],
                "stateChanges": Observable {
                  "observers": Array [],
                },
                "status": "INVALID",
                "statusChanges": Observable {
                  "observers": Array [],
                },
                "submitted": false,
                "touched": false,
                "validator": [Function],
                "validatorsOrOpts": Object {
                  "asyncValidators": null,
                  "updateOn": null,
                  "validators": [Function],
                },
                "value": "",
                "valueChanges": Observable {
                  "observers": Array [],
                },
              },
              "location": [Circular],
            },
            "errors": null,
            "get": [Function],
            "getError": [Function],
            "handleSubmit": [Function],
            "hasError": [Function],
            "meta": Object {},
            "patchValue": [Function],
            "pristine": true,
            "reset": [Function],
            "setValue": [Function],
            "stateChanges": Observable {
              "observers": Array [
                [Function],
              ],
            },
            "status": "INVALID",
            "statusChanges": Observable {
              "observers": Array [],
            },
            "submitted": false,
            "touched": false,
            "validator": null,
            "validatorOrOpts": Object {
              "asyncValidators": null,
              "updateOn": null,
              "validators": null,
            },
            "value": Object {
              "coordinates": "",
              "location": Object {
                "foo": "bar",
              },
            },
            "valueChanges": Observable {
              "observers": Array [],
            },
          },
          "_pendingChange": true,
          "_pendingDirty": false,
          "_pendingTouched": false,
          "_pendingValue": Object {
            "foo": "bar",
          },
          "asyncValidator": null,
          "errors": null,
          "formState": Object {
            "foo": "bar",
          },
          "get": [Function],
          "getError": [Function],
          "handler": [Function],
          "hasError": [Function],
          "meta": Object {},
          "onBlur": [Function],
          "onBlurChanges": Observable {
            "observers": Array [],
          },
          "onChange": [Function],
          "onValueChanges": Observable {
            "observers": Array [],
          },
          "patchValue": [Function],
          "pristine": true,
          "reset": [Function],
          "setValue": [Function],
          "stateChanges": Observable {
            "observers": Array [],
          },
          "status": "VALID",
          "statusChanges": Observable {
            "observers": Array [],
          },
          "submitted": false,
          "touched": false,
          "validator": null,
          "validatorsOrOpts": Object {
            "asyncValidators": undefined,
            "updateOn": undefined,
            "validators": undefined,
          },
          "value": Object {
            "foo": "bar",
          },
          "valueChanges": Observable {
            "observers": Array [],
          },
        }
      }
      emptyOptionText=""
      name="location"
      onQueryResult={[Function]}
      render={[Function]}
      values={Array []}
    />
    <button
      className="location-form__submit action primary"
      disabled={true}
      type="submit"
    >
      Locatie opslaan
    </button>
    <button
      className="location-form__cancel action secundary-grey"
    >
      Annuleren
    </button>
  </div>
</form>
`;

exports[`<Form /> should render correctly 1`] = `
<div
  className="location-form"
>
  <FieldGroup
    control={
      FormGroup {
        "_onDisabledChange": Array [],
        "_pendingChange": false,
        "_pendingDirty": false,
        "_pendingTouched": false,
        "asyncValidator": null,
        "controls": Object {
          "coordinates": FormControl {
            "_onCollectionChange": [Function],
            "_onDisabledChange": Array [],
            "_parent": [Circular],
            "_pendingChange": true,
            "_pendingDirty": false,
            "_pendingTouched": false,
            "_pendingValue": "",
            "asyncValidator": null,
            "errors": Object {
              "required": true,
            },
            "formState": "",
            "get": [Function],
            "getError": [Function],
            "handler": [Function],
            "hasError": [Function],
            "meta": Object {},
            "onBlur": [Function],
            "onBlurChanges": Observable {
              "observers": Array [],
            },
            "onChange": [Function],
            "onValueChanges": Observable {
              "observers": Array [],
            },
            "patchValue": [Function],
            "pristine": true,
            "reset": [Function],
            "setValue": [Function],
            "stateChanges": Observable {
              "observers": Array [],
            },
            "status": "INVALID",
            "statusChanges": Observable {
              "observers": Array [],
            },
            "submitted": false,
            "touched": false,
            "validator": [Function],
            "validatorsOrOpts": Object {
              "asyncValidators": null,
              "updateOn": null,
              "validators": [Function],
            },
            "value": "",
            "valueChanges": Observable {
              "observers": Array [],
            },
          },
          "location": FormControl {
            "_onCollectionChange": [Function],
            "_onDisabledChange": Array [],
            "_parent": [Circular],
            "_pendingChange": true,
            "_pendingDirty": false,
            "_pendingTouched": false,
            "_pendingValue": Object {
              "foo": "bar",
            },
            "asyncValidator": null,
            "errors": null,
            "formState": Object {
              "foo": "bar",
            },
            "get": [Function],
            "getError": [Function],
            "handler": [Function],
            "hasError": [Function],
            "meta": Object {},
            "onBlur": [Function],
            "onBlurChanges": Observable {
              "observers": Array [],
            },
            "onChange": [Function],
            "onValueChanges": Observable {
              "observers": Array [],
            },
            "patchValue": [Function],
            "pristine": true,
            "reset": [Function],
            "setValue": [Function],
            "stateChanges": Observable {
              "observers": Array [],
            },
            "status": "VALID",
            "statusChanges": Observable {
              "observers": Array [],
            },
            "submitted": false,
            "touched": false,
            "validator": null,
            "validatorsOrOpts": Object {
              "asyncValidators": undefined,
              "updateOn": undefined,
              "validators": undefined,
            },
            "value": Object {
              "foo": "bar",
            },
            "valueChanges": Observable {
              "observers": Array [],
            },
          },
        },
        "errors": null,
        "get": [Function],
        "getError": [Function],
        "handleSubmit": [Function],
        "hasError": [Function],
        "meta": Object {},
        "patchValue": [Function],
        "pristine": true,
        "reset": [Function],
        "setValue": [Function],
        "stateChanges": Observable {
          "observers": Array [],
        },
        "status": "INVALID",
        "statusChanges": Observable {
          "observers": Array [],
        },
        "submitted": false,
        "touched": false,
        "validator": null,
        "validatorOrOpts": Object {
          "asyncValidators": null,
          "updateOn": null,
          "validators": null,
        },
        "value": Object {
          "coordinates": "",
          "location": Object {
            "foo": "bar",
          },
        },
        "valueChanges": Observable {
          "observers": Array [],
        },
      }
    }
    render={[Function]}
    strict={true}
  />
</div>
`;
