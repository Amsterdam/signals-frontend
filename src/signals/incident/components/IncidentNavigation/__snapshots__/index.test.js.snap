// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<IncidentNavigation /> rendering render correctly button with submitting state 1`] = `
<Wizard
  basename=""
  history={
    Object {
      "listen": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
  onNext={null}
  render={null}
>
  <IncidentNavigation
    controls={Object {}}
    meta={
      Object {
        "createIncident": [MockFunction],
        "handleSubmit": [MockFunction],
        "incidentContainer": Object {
          "incident": Object {},
        },
        "submitting": true,
        "updateIncident": [MockFunction],
        "wizard": Object {
          "bedankt": Object {
            "form": Object {
              "controls": Object {},
            },
          },
          "beschrijf": Object {
            "form": Object {
              "controls": Object {},
            },
            "formAction": "UPDATE_INCIDENT",
            "nextButtonClass": "next-class",
            "nextButtonLabel": "Volgende",
          },
          "email": Object {
            "form": Object {
              "controls": Object {},
            },
            "nextButtonClass": "next-class",
            "nextButtonLabel": "Volgende",
            "previousButtonClass": "previous-class",
            "previousButtonLabel": "Vorige",
          },
          "samenvatting": Object {
            "form": Object {
              "controls": Object {},
            },
            "formAction": "CREATE_INCIDENT",
            "nextButtonClass": "next-class send-button",
            "nextButtonLabel": "Volgende",
            "previousButtonClass": "previous-class",
            "previousButtonLabel": "Vorige",
          },
        },
      }
    }
    valid={true}
    value={Object {}}
  >
    <WithWizard
      render={[Function]}
    >
      0
    </WithWizard>
  </IncidentNavigation>
</Wizard>
`;

exports[`<IncidentNavigation /> rendering render correctly button with submitting state 2`] = `
<div
  className="incident-navigation"
>
  <span />
  <NextButton
    className=""
    data-testid="nextButton"
    onClick={[Function]}
  >
    <span
      className="value"
    >
      Volgende
    </span>
    <span
      className="working"
    >
      <div
        className="progress-indicator progress-white"
      />
    </span>
  </NextButton>
</div>
`;

exports[`<IncidentNavigation /> rendering render correctly first step with one button: next 1`] = `
<Wizard
  basename=""
  history={
    Object {
      "listen": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
  onNext={null}
  render={null}
>
  <IncidentNavigation
    controls={Object {}}
    meta={
      Object {
        "createIncident": [MockFunction],
        "handleSubmit": [MockFunction],
        "incidentContainer": Object {
          "incident": Object {},
        },
        "submitting": false,
        "updateIncident": [MockFunction],
        "wizard": Object {
          "bedankt": Object {
            "form": Object {
              "controls": Object {},
            },
          },
          "beschrijf": Object {
            "form": Object {
              "controls": Object {},
            },
            "formAction": "UPDATE_INCIDENT",
            "nextButtonClass": "next-class",
            "nextButtonLabel": "Volgende",
          },
          "email": Object {
            "form": Object {
              "controls": Object {},
            },
            "nextButtonClass": "next-class",
            "nextButtonLabel": "Volgende",
            "previousButtonClass": "previous-class",
            "previousButtonLabel": "Vorige",
          },
          "samenvatting": Object {
            "form": Object {
              "controls": Object {},
            },
            "formAction": "CREATE_INCIDENT",
            "nextButtonClass": "next-class send-button",
            "nextButtonLabel": "Volgende",
            "previousButtonClass": "previous-class",
            "previousButtonLabel": "Vorige",
          },
        },
      }
    }
    valid={true}
    value={Object {}}
  >
    <WithWizard
      render={[Function]}
    >
      0
    </WithWizard>
  </IncidentNavigation>
</Wizard>
`;

exports[`<IncidentNavigation /> rendering render correctly first step with one button: next 2`] = `
<div
  className="incident-navigation"
>
  <span />
  <NextButton
    className=""
    data-testid="nextButton"
    onClick={[Function]}
  >
    <span
      className="value"
    >
      Volgende
    </span>
  </NextButton>
</div>
`;

exports[`<IncidentNavigation /> rendering render correctly last step with no button 1`] = `
<Wizard
  basename=""
  history={
    Object {
      "listen": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
  onNext={null}
  render={null}
>
  <IncidentNavigation
    controls={Object {}}
    meta={
      Object {
        "createIncident": [MockFunction],
        "handleSubmit": [MockFunction],
        "incidentContainer": Object {
          "incident": Object {},
        },
        "submitting": false,
        "updateIncident": [MockFunction],
        "wizard": Object {
          "bedankt": Object {
            "form": Object {
              "controls": Object {},
            },
          },
          "beschrijf": Object {
            "form": Object {
              "controls": Object {},
            },
            "formAction": "UPDATE_INCIDENT",
            "nextButtonClass": "next-class",
            "nextButtonLabel": "Volgende",
          },
          "email": Object {
            "form": Object {
              "controls": Object {},
            },
            "nextButtonClass": "next-class",
            "nextButtonLabel": "Volgende",
            "previousButtonClass": "previous-class",
            "previousButtonLabel": "Vorige",
          },
          "samenvatting": Object {
            "form": Object {
              "controls": Object {},
            },
            "formAction": "CREATE_INCIDENT",
            "nextButtonClass": "next-class send-button",
            "nextButtonLabel": "Volgende",
            "previousButtonClass": "previous-class",
            "previousButtonLabel": "Vorige",
          },
        },
      }
    }
    valid={true}
    value={Object {}}
  >
    <WithWizard
      render={[Function]}
    >
      0
    </WithWizard>
  </IncidentNavigation>
</Wizard>
`;

exports[`<IncidentNavigation /> rendering render correctly last step with no button 2`] = `
<div
  className="incident-navigation"
>
  <span />
</div>
`;

exports[`<IncidentNavigation /> rendering render correctly last step with two buttons: previous and submit 1`] = `
<Wizard
  basename=""
  history={
    Object {
      "listen": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
  onNext={null}
  render={null}
>
  <IncidentNavigation
    controls={Object {}}
    meta={
      Object {
        "createIncident": [MockFunction],
        "handleSubmit": [MockFunction],
        "incidentContainer": Object {
          "incident": Object {},
        },
        "submitting": false,
        "updateIncident": [MockFunction],
        "wizard": Object {
          "bedankt": Object {
            "form": Object {
              "controls": Object {},
            },
          },
          "beschrijf": Object {
            "form": Object {
              "controls": Object {},
            },
            "formAction": "UPDATE_INCIDENT",
            "nextButtonClass": "next-class",
            "nextButtonLabel": "Volgende",
          },
          "email": Object {
            "form": Object {
              "controls": Object {},
            },
            "nextButtonClass": "next-class",
            "nextButtonLabel": "Volgende",
            "previousButtonClass": "previous-class",
            "previousButtonLabel": "Vorige",
          },
          "samenvatting": Object {
            "form": Object {
              "controls": Object {},
            },
            "formAction": "CREATE_INCIDENT",
            "nextButtonClass": "next-class send-button",
            "nextButtonLabel": "Volgende",
            "previousButtonClass": "previous-class",
            "previousButtonLabel": "Vorige",
          },
        },
      }
    }
    valid={true}
    value={Object {}}
  >
    <WithWizard
      render={[Function]}
    >
      0
    </WithWizard>
  </IncidentNavigation>
</Wizard>
`;

exports[`<IncidentNavigation /> rendering render correctly last step with two buttons: previous and submit 2`] = `
<div
  className="incident-navigation"
>
  <PreviousButton
    className="previous-class"
    data-testid="previousButton"
    onClick={[MockFunction]}
  >
    Vorige
  </PreviousButton>
  <NextButton
    className=""
    data-testid="nextButton"
    onClick={[Function]}
  >
    <span
      className="value"
    >
      Volgende
    </span>
  </NextButton>
</div>
`;

exports[`<IncidentNavigation /> rendering render correctly second step when submit button is suppressed with no buttons 1`] = `
<Wizard
  basename=""
  history={
    Object {
      "listen": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
  onNext={null}
  render={null}
>
  <IncidentNavigation
    controls={
      Object {
        "hide_navigation_buttons": Object {
          "meta": Object {
            "isVisible": true,
          },
        },
      }
    }
    meta={
      Object {
        "createIncident": [MockFunction],
        "handleSubmit": [MockFunction],
        "incidentContainer": Object {
          "incident": Object {},
        },
        "submitting": false,
        "updateIncident": [MockFunction],
        "wizard": Object {
          "bedankt": Object {
            "form": Object {
              "controls": Object {},
            },
          },
          "beschrijf": Object {
            "form": Object {
              "controls": Object {},
            },
            "formAction": "UPDATE_INCIDENT",
            "nextButtonClass": "next-class",
            "nextButtonLabel": "Volgende",
          },
          "email": Object {
            "form": Object {
              "controls": Object {},
            },
            "nextButtonClass": "next-class",
            "nextButtonLabel": "Volgende",
            "previousButtonClass": "previous-class",
            "previousButtonLabel": "Vorige",
          },
          "samenvatting": Object {
            "form": Object {
              "controls": Object {},
            },
            "formAction": "CREATE_INCIDENT",
            "nextButtonClass": "next-class send-button",
            "nextButtonLabel": "Volgende",
            "previousButtonClass": "previous-class",
            "previousButtonLabel": "Vorige",
          },
        },
      }
    }
    valid={true}
    value={Object {}}
  >
    <WithWizard
      render={[Function]}
    >
      0
    </WithWizard>
  </IncidentNavigation>
</Wizard>
`;

exports[`<IncidentNavigation /> rendering render correctly second step when submit button is suppressed with no buttons 2`] = `
<div
  className="incident-navigation"
>
  <span />
</div>
`;

exports[`<IncidentNavigation /> rendering render correctly second step with two buttons: previous and next 1`] = `
<Wizard
  basename=""
  history={
    Object {
      "listen": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
  onNext={null}
  render={null}
>
  <IncidentNavigation
    controls={Object {}}
    meta={
      Object {
        "createIncident": [MockFunction],
        "handleSubmit": [MockFunction],
        "incidentContainer": Object {
          "incident": Object {},
        },
        "submitting": false,
        "updateIncident": [MockFunction],
        "wizard": Object {
          "bedankt": Object {
            "form": Object {
              "controls": Object {},
            },
          },
          "beschrijf": Object {
            "form": Object {
              "controls": Object {},
            },
            "formAction": "UPDATE_INCIDENT",
            "nextButtonClass": "next-class",
            "nextButtonLabel": "Volgende",
          },
          "email": Object {
            "form": Object {
              "controls": Object {},
            },
            "nextButtonClass": "next-class",
            "nextButtonLabel": "Volgende",
            "previousButtonClass": "previous-class",
            "previousButtonLabel": "Vorige",
          },
          "samenvatting": Object {
            "form": Object {
              "controls": Object {},
            },
            "formAction": "CREATE_INCIDENT",
            "nextButtonClass": "next-class send-button",
            "nextButtonLabel": "Volgende",
            "previousButtonClass": "previous-class",
            "previousButtonLabel": "Vorige",
          },
        },
      }
    }
    valid={true}
    value={Object {}}
  >
    <WithWizard
      render={[Function]}
    >
      0
    </WithWizard>
  </IncidentNavigation>
</Wizard>
`;

exports[`<IncidentNavigation /> rendering render correctly second step with two buttons: previous and next 2`] = `
<div
  className="incident-navigation"
>
  <PreviousButton
    className="previous-class"
    data-testid="previousButton"
    onClick={[MockFunction]}
  >
    Vorige
  </PreviousButton>
  <NextButton
    className=""
    data-testid="nextButton"
    onClick={[Function]}
  >
    <span
      className="value"
    >
      Volgende
    </span>
  </NextButton>
</div>
`;
