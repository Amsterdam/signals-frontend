// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<IncidentWizard /> expect to render form correctly 1`] = `
<MemoryRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "REPLACE",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/incident/beschrijf",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/incident/beschrijf",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <IncidentWizard
      createIncident={[MockFunction]}
      getClassification={[MockFunction]}
      incidentContainer={
        Object {
          "loading": false,
        }
      }
      isAuthenticated={false}
      updateIncident={[MockFunction]}
      wizardDefinition={
        Object {
          "beschrijf": Object {
            "form": Object {
              "controls": Object {},
            },
          },
        }
      }
    >
      <div
        className="incident-wizard"
      >
        <Route
          render={[Function]}
        >
          <Wizard
            basename=""
            history={
              Object {
                "action": "REPLACE",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/incident/beschrijf",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/incident/beschrijf",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            onNext={[Function]}
            render={null}
          >
            <Steps
              step={null}
            >
              <Step
                id="incident/beschrijf"
                key=".$beschrijf"
                render={[Function]}
              >
                <div>
                  <h1>
                    beschrijf
                  </h1>
                  <Component
                    createIncident={[MockFunction]}
                    fieldConfig={
                      Object {
                        "controls": Object {},
                      }
                    }
                    getClassification={[MockFunction]}
                    incidentContainer={
                      Object {
                        "loading": false,
                      }
                    }
                    isAuthenticated={false}
                    updateIncident={[MockFunction]}
                    wizard={
                      Object {
                        "beschrijf": Object {
                          "form": Object {
                            "controls": Object {},
                          },
                        },
                      }
                    }
                  >
                    IncidentForm
                  </Component>
                </div>
              </Step>
            </Steps>
          </Wizard>
        </Route>
      </div>
    </IncidentWizard>
  </Router>
</MemoryRouter>
`;

exports[`<IncidentWizard /> expect to render loading correctly 1`] = `
<MemoryRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <IncidentWizard
      createIncident={[MockFunction]}
      getClassification={[MockFunction]}
      incidentContainer={
        Object {
          "loading": true,
        }
      }
      isAuthenticated={false}
      updateIncident={[MockFunction]}
      wizardDefinition={
        Object {
          "samenvatting": Object {
            "preview": Object {},
          },
        }
      }
    >
      <div
        className="incident-wizard"
      >
        <Route
          render={[Function]}
        >
          <Wizard
            basename=""
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            onNext={[Function]}
            render={null}
          >
            <Component>
              LoadingIndicator
            </Component>
          </Wizard>
        </Route>
      </div>
    </IncidentWizard>
  </Router>
</MemoryRouter>
`;

exports[`<IncidentWizard /> expect to render preview correctly 1`] = `
<MemoryRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "REPLACE",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/incident/samenvatting",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/incident/samenvatting",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <IncidentWizard
      createIncident={[MockFunction]}
      getClassification={[MockFunction]}
      incidentContainer={
        Object {
          "loading": false,
        }
      }
      isAuthenticated={false}
      updateIncident={[MockFunction]}
      wizardDefinition={
        Object {
          "samenvatting": Object {
            "preview": Object {},
          },
        }
      }
    >
      <div
        className="incident-wizard"
      >
        <Route
          render={[Function]}
        >
          <Wizard
            basename=""
            history={
              Object {
                "action": "REPLACE",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/incident/samenvatting",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/incident/samenvatting",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            onNext={[Function]}
            render={null}
          >
            <Steps
              step={null}
            >
              <Step
                id="incident/samenvatting"
                key=".$samenvatting"
                render={[Function]}
              >
                <div>
                  <h1>
                    samenvatting
                  </h1>
                  <Component
                    incidentContainer={
                      Object {
                        "loading": false,
                      }
                    }
                    isAuthenticated={false}
                    preview={Object {}}
                  >
                    IncidentPreview
                  </Component>
                </div>
              </Step>
            </Steps>
          </Wizard>
        </Route>
      </div>
    </IncidentWizard>
  </Router>
</MemoryRouter>
`;
